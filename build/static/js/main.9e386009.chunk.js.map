{"version":3,"sources":["Snake.js","Food.js","InterestingFood.js","App.js","serviceWorker.js","index.js"],"names":["props","snakeBody","map","dot","i","list","last","length","form","left","top","className","key","style","id","getRandomCoordinates","Math","floor","random","document","body","backgroundColor","initialState","food","interestingFood","isInterestingFoodVisible","interestingFoodType","multiplier","immune","speed","direction","App","state","onKeyDown","e","window","event","keyCode","setState","moveSnake","dots","head","push","shift","removeImmune","removeSlow","removeSuperEffect","querySelectorAll","forEach","el","classList","remove","despawnInterestingFood","querySelector","removeTextPopup","getElementById","firstChild","removeChild","setInterval","this","onkeydown","prevProps","prevState","collisionWithBorders","collisionWithSelf","checkIfEaten","checkIfEatenInterestingFood","onGameOver","snake","pop","abs","createTextPopup","increaseSnake","increaseSpeed","decreaseSnake","setImmune","setSlow","setSuperEffect","setTimeout","add","newSnake","unshift","checkLevelUp","level","ceil","includes","spawnInterestingFood","selectedInterestingFood","alert","text","content","createTextNode","appendChild","Snake","Food","InterestingFood","Component","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0MAEe,WAACA,GACd,OACE,6BACIA,EAAMC,UAAUC,KAAI,SAACC,EAAKC,EAAGC,GAC7B,IAAIC,EAAOF,EAAI,IAAMC,EAAKE,OACpBC,EAAO,CACXC,KAAK,GAAD,OAAKN,EAAI,GAAT,KACJO,IAAI,GAAD,OAAKP,EAAI,GAAT,MAEL,OACE,yBAAKQ,UAAYL,EAAO,iBAAkB,YAAaM,IAAKR,EAAGS,MAAOL,SCVjE,WAACR,GAEd,IAAMQ,EAAO,CACXC,KAAK,GAAD,OAAKT,EAAMG,IAAI,GAAf,KACJO,IAAI,GAAD,OAAKV,EAAMG,IAAI,GAAf,MAGL,OACE,yBAAKQ,UAAU,aAAaE,MAAOL,KCRxB,WAACR,GAEd,IAAMQ,EAAO,CACXC,KAAK,GAAD,OAAKT,EAAMG,IAAI,GAAf,KACJO,IAAI,GAAD,OAAKV,EAAMG,IAAI,GAAf,MAGL,OACE,yBAAKQ,UAAU,aAAaG,GAAG,mBAAmBD,MAAOL,KCH7D,SAASO,IAKP,MAAO,CAF2D,EAA1DC,KAAKC,OAAO,GAAAD,KAAKE,SAFf,GAEmD,GACM,EAA1DF,KAAKC,OAAO,GAAAD,KAAKE,SAHhB,GAGoD,IANhEC,SAASC,KAAKP,MAAMQ,gBAAkB,WAUtC,IAAMC,EAAe,CACnBC,KAAMR,IACNS,gBAAiBT,IACjBU,0BAA0B,EAC1BC,oBAAqB,GACrBC,WAAY,EACZC,QAAQ,EACRC,MAAO,GACPC,UAAW,QACX7B,UAAW,CACT,CAAC,EAAG,GACJ,CAAC,EAAG,KAoSO8B,E,4MA9RbC,MAAQV,E,EAcRW,UAAY,SAACC,GAEX,QADAA,EAAIA,GAAKC,OAAOC,OACNC,SACR,KAAK,GACH,EAAKC,SAAS,CAACR,UAAW,OAC1B,MACF,KAAK,GACH,EAAKQ,SAAS,CAACR,UAAW,SAC1B,MACF,KAAK,GACH,EAAKQ,SAAS,CAACR,UAAW,SAC1B,MACF,KAAK,GACH,EAAKQ,SAAS,CAACR,UAAW,Y,EAKhCS,UAAY,WACV,IAAIC,EAAI,YAAO,EAAKR,MAAM/B,WACtBwC,EAAOD,EAAKA,EAAKjC,OAAS,GAE9B,OAAQ,EAAKyB,MAAMF,WACjB,IAAK,QACHW,EAAO,CAACA,EAAK,GAAK,EAAGA,EAAK,IAC1B,MACF,IAAK,OACHA,EAAO,CAACA,EAAK,GAAK,EAAGA,EAAK,IAC1B,MACF,IAAK,OACHA,EAAO,CAACA,EAAK,GAAIA,EAAK,GAAK,GAC3B,MACF,IAAK,KACHA,EAAO,CAACA,EAAK,GAAIA,EAAK,GAAK,GAG/BD,EAAKE,KAAKD,GACVD,EAAKG,QAEL,EAAKL,SAAS,CACZrC,UAAWuC,K,EAwFfI,aAAe,WACb,EAAKN,SAAS,CAACV,QAAQ,K,EAczBiB,WAAa,WACX,EAAKP,SAAS,CACZT,MAAO,M,EAiBXiB,kBAAoB,WAClB3B,SAAS4B,iBAAiB,cAAcC,SAAQ,SAACC,GAAD,OAAQA,EAAGC,UAAUC,OAAO,YAC5E,EAAKb,SAAS,CACZX,WAAY,EACZE,MAAO,M,EAyDXuB,uBAAyB,WAC6B,OAAhDjC,SAASkC,cAAc,sBACzB,EAAKf,SAAS,CACZb,0BAA0B,K,EAsBhC6B,gBAAkB,WAEhB,IADA,IAAIL,EAAK9B,SAASoC,eAAe,QAC1BN,EAAGO,YACRP,EAAGQ,YAAYR,EAAGO,a,uDAvQtB,WACEE,YAAYC,KAAKpB,UAAWoB,KAAK3B,MAAMH,OACvCV,SAASyC,UAAYD,KAAK1B,Y,gCAG5B,SAAmB4B,EAAWC,GAC5BH,KAAKI,uBACLJ,KAAKK,oBACLL,KAAKM,eACLN,KAAKO,4BAA4BL,EAAWC,K,kCA+C9C,WACE,IAAIrB,EAAOkB,KAAK3B,MAAM/B,UAAU0D,KAAK3B,MAAM/B,UAAUM,OAAS,IAC1DkC,EAAK,IAAM,IAAMA,EAAK,IAAM,IAAMA,EAAK,GAAK,GAAKA,EAAK,GAAK,IAC7DkB,KAAKQ,e,+BAIT,WAAqB,IAAD,OAClB,IAAKR,KAAK3B,MAAMJ,OAAQ,CACtB,IAAIwC,EAAK,YAAOT,KAAK3B,MAAM/B,WACvBwC,EAAO2B,EAAMA,EAAM7D,OAAS,GAChC6D,EAAMC,MACND,EAAMpB,SAAQ,SAAA7C,GACRsC,EAAK,KAAOtC,EAAI,IAAMsC,EAAK,KAAOtC,EAAI,IACxC,EAAKgE,mB,0BAMb,WACE,IAAI1B,EAAOkB,KAAK3B,MAAM/B,UAAU0D,KAAK3B,MAAM/B,UAAUM,OAAS,GAC1DgB,EAAOoC,KAAK3B,MAAMT,KAClBP,KAAKsD,IAAI7B,EAAK,GAAKlB,EAAK,KAAO,GAAKP,KAAKsD,IAAI7B,EAAK,GAAKlB,EAAK,KAAO,IACrEoC,KAAKrB,SAAS,CAAEf,KAAMR,MACtB4C,KAAKY,gBAAgB,KAAOZ,KAAK3B,MAAML,WAAa,UACpDgC,KAAKa,cAAcb,KAAK3B,MAAML,YAC9BgC,KAAKc,mB,yCAIT,SAA4BZ,EAAWC,GAOrC,IAAItC,EAAkBmC,KAAK3B,MAAMR,gBAC7BiB,EAAOkB,KAAK3B,MAAM/B,UAAU0D,KAAK3B,MAAM/B,UAAUM,OAAS,GAC9D,GAAIoD,KAAK3B,MAAMP,0BAA4BT,KAAKsD,IAAI7B,EAAK,GAAKjB,EAAgB,KAAO,GAAKR,KAAKsD,IAAI7B,EAAK,GAAKjB,EAAgB,KAAO,EAClI,OAAQmC,KAAK3B,MAAMN,qBACjB,IAAK,eAGH,OAFa,CAAC,YAAa,cAAe,SAAU,QACxBV,KAAKC,MAAsB,EAAhBD,KAAKE,YAE1C,IAAK,YACHyC,KAAKa,cAAsC,EAAxBb,KAAK3B,MAAML,YAC9BgC,KAAKY,gBAAgB,wCACrB,MACF,IAAK,cACHZ,KAAKe,cAAsC,EAAxBf,KAAK3B,MAAML,YAC9BgC,KAAKY,gBAAgB,wCACrB,MAEF,IAAK,SACHZ,KAAKgB,UAAUd,EAAWC,GAC1BH,KAAKY,gBAAgB,iDACrB,MACF,IAAK,OACHZ,KAAKiB,QAAQf,EAAWC,GACxBH,KAAKY,gBAAgB,+BAG3B,MACA,IAAK,aACHZ,KAAKkB,eAAef,GACpBH,KAAKY,gBAAgB,wD,uBAM7B,SAAUT,GAAY,IAAD,QACM,IAArBA,EAAUlC,QACZ+B,KAAKrB,SAAS,CACZV,QAAQ,EACRH,0BAA0B,IACzB,WACDqD,WAAW,EAAKlC,aAAc,U,qBASpC,SAAQkB,GAAY,IAAD,OACO,MAApBA,EAAUjC,OACZ8B,KAAKrB,SAAS,CACZT,MAAO,IACPJ,0BAA0B,IACzB,WACDqD,WAAW,EAAKjC,WAAY,U,4BAWlC,SAAeiB,GAAY,IAAD,OACK,IAAzBA,EAAUnC,YAAwC,IAApBmC,EAAUjC,QAC1CV,SAAS4B,iBAAiB,cAAcC,SAAQ,SAACC,GAAD,OAAQA,EAAGC,UAAU6B,IAAI,YACzEpB,KAAKrB,SAAS,CACZX,WAAY,EACZE,MAAO,EACPJ,0BAA0B,IACzB,WACDqD,WAAW,EAAKhC,kBAAmB,W,2BAiBzC,SAAcnB,GAEZ,IAFyB,IAAD,OACpBqD,EAAQ,YAAOrB,KAAK3B,MAAM/B,WACrBG,EAAI,EAAGA,EAAIuB,EAAYvB,IAC9B4E,EAASC,QAAQ,IAEnBtB,KAAKrB,SAAS,CAAErC,UAAW+E,IAAY,WACrC,EAAKE,oB,2BAIT,SAAcvD,GAAa,IAAD,OACxB,GAAIgC,KAAK3B,MAAM/B,UAAUM,OAASoB,EAAa,EAAG,CAEhD,IADA,IAAIqD,EAAQ,YAAOrB,KAAK3B,MAAM/B,WACrBG,EAAI,EAAGA,EAAIuB,EAAYvB,IAC9B4E,EAASC,QAAQ,IAEnBtB,KAAKrB,SAAS,CAAErC,UAAW+E,IAAY,WACrC,IAAIG,EAAQnE,KAAKoE,KAAK,EAAKpD,MAAM/B,UAAUM,OAAS,GAChD,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IAAI8E,SAAS,EAAKrD,MAAM/B,UAAUM,SACxD,EAAKgE,gBAAgB,eAAiBY,GACxC,EAAKD,qB,0BAKX,WACMlE,KAAKoE,KAAKzB,KAAK3B,MAAM/B,UAAUM,OAAS,GAAK,KAAO,GACxDoD,KAAKY,gBAAgB,sBAEhBZ,KAAK3B,MAAM/B,UAAUM,OAAU,IAAM,GACxCoD,KAAK2B,yB,kCAGT,WAAwB,IAAD,OAEjBC,EADU,CAAC,aAAc,gBACSvE,KAAKC,MAAsB,EAAhBD,KAAKE,WACtDC,SAAS4B,iBAAiB,qBAAqBC,SAAQ,SAACC,GAAD,OAAQA,EAAGC,UAAUC,OAAO,iBACnFhC,SAAS4B,iBAAiB,qBAAqBC,SAAQ,SAACC,GAAD,OAAQA,EAAGE,OAAO,mBAEzEQ,KAAKrB,SAAS,CACZb,0BAA0B,EAC1BD,gBAAiBT,IACjBW,oBAAqB6D,IACpB,WACDpE,SAAS4B,iBAAiB,qBAAqBC,SAAQ,SAACC,GAAD,OAAQA,EAAGC,UAAU6B,IAAIQ,MAChFT,WAAW,EAAK1B,uBAAwB,U,2BAY5C,WACMO,KAAK3B,MAAMH,MAAQ,IACrB8B,KAAKrB,SAAS,CAAET,MAAO8B,KAAK3B,MAAMH,MAAQ,O,wBAI9C,WACE2D,MAAM,oCAAD,OAAqC7B,KAAK3B,MAAM/B,UAAUM,OAA1D,MACLoD,KAAKrB,SAAShB,K,6BAGhB,SAAgBmE,GACd,IAAIC,EAAUvE,SAASwE,eAAeF,GACtCtE,SAASoC,eAAe,QAAQqC,YAAYF,GAC5CZ,WAAWnB,KAAKL,gBAAiB,Q,oBAUnC,WACE,OACE,yBAAKxC,GAAG,OAAOH,UAAU,QACvB,uBAAGA,UAAU,aAAb,WAAkCgD,KAAK3B,MAAM/B,UAAUM,QACvD,uBAAGI,UAAU,aAAb,WAAkCK,KAAKoE,KAAKzB,KAAK3B,MAAM/B,UAAUM,OAAS,IAC1E,yBAAKO,GAAG,gBAAe,0BAAMA,GAAG,UAChC,kBAAC+E,EAAD,CAAO5F,UAAa0D,KAAK3B,MAAM/B,YAC/B,kBAAC6F,EAAD,CAAM3F,IAAOwD,KAAK3B,MAAMT,OAExBoC,KAAK3B,MAAMP,yBACX,kBAACsE,EAAD,CAAiB5F,IAAOwD,KAAK3B,MAAMR,kBAAqB,U,GAzR9CwE,aClBEC,QACW,cAA7B9D,OAAO+D,SAASC,UAEe,UAA7BhE,OAAO+D,SAASC,UAEhBhE,OAAO+D,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASnF,SAASoC,eAAe,SD2H3C,kBAAmBgD,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.9e386009.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default (props) => {\r\n  return (\r\n    <div>\r\n      { props.snakeBody.map((dot, i, list) => {\r\n        let last = i + 1 === list.length;\r\n        const form = {\r\n          left: `${dot[0]}%`,\r\n          top: `${dot[1]}%`\r\n        }\r\n        return (\r\n          <div className={ last ? \"snake-dot head\": \"snake-dot\"} key={i} style={form}></div>\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\n\r\nexport default (props) => {\r\n\r\n  const form = {\r\n    left: `${props.dot[0]}%`,\r\n    top: `${props.dot[1]}%`\r\n  }\r\n\r\n  return (\r\n    <div className=\"snake-food\" style={form}></div>\r\n  )\r\n}","import React from 'react';\r\n\r\nexport default (props) => {\r\n\r\n  const form = {\r\n    left: `${props.dot[0]}%`,\r\n    top: `${props.dot[1]}%`\r\n  }\r\n\r\n  return (\r\n    <div className=\"snake-food\" id=\"interesting-food\" style={form}></div>\r\n  )\r\n}","import React, { Component } from 'react';\r\nimport Snake from './Snake';\r\nimport Food from './Food';\r\nimport InterestingFood from './InterestingFood';\r\n\r\ndocument.body.style.backgroundColor = '##75816B';\r\n\r\nfunction getRandomCoordinates() {\r\n  let min = 1;\r\n  let max = 94;\r\n  let x = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\r\n  let y =  Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\r\n  return [x, y];\r\n}\r\n\r\nconst initialState = {\r\n  food: getRandomCoordinates(),\r\n  interestingFood: getRandomCoordinates(),\r\n  isInterestingFoodVisible: false,\r\n  interestingFoodType: \"\",\r\n  multiplier: 2,\r\n  immune: false,\r\n  speed: 80,\r\n  direction: 'RIGHT',\r\n  snakeBody: [\r\n    [0, 0],\r\n    [2, 0]\r\n  ],\r\n}\r\n\r\nclass App extends Component {\r\n\r\n  state = initialState;\r\n\r\n  componentDidMount() {\r\n    setInterval(this.moveSnake, this.state.speed);\r\n    document.onkeydown = this.onKeyDown;\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    this.collisionWithBorders();\r\n    this.collisionWithSelf();\r\n    this.checkIfEaten();\r\n    this.checkIfEatenInterestingFood(prevProps, prevState);\r\n  }\r\n\r\n  onKeyDown = (e) => {\r\n    e = e || window.event;\r\n    switch (e.keyCode) {\r\n      case 38:\r\n        this.setState({direction: 'UP'});\r\n        break;\r\n      case 40:\r\n        this.setState({direction: 'DOWN'});\r\n        break;\r\n      case 37:\r\n        this.setState({direction: 'LEFT'});\r\n        break;\r\n      case 39:\r\n        this.setState({direction: 'RIGHT'});\r\n        break;\r\n    }\r\n  }\r\n\r\n  moveSnake = () => {\r\n    let dots = [...this.state.snakeBody]; //dot refers to each element in snakeBody array.\r\n    let head = dots[dots.length - 1];  //head of snake is the first dot in the snakeBody array...\r\n\r\n    switch (this.state.direction) {\r\n      case 'RIGHT':\r\n        head = [head[0] + 1, head[1]]; //x,y coord, so x is changed to move by one unit (3% to the right), while y stays the same.\r\n        break;\r\n      case 'LEFT':\r\n        head = [head[0] - 1, head[1]]; //x,y coord, so x is changed to move one by negative unit (3% to the left), while y stays the same.\r\n        break;\r\n      case 'DOWN':\r\n        head = [head[0], head[1] + 1];  //x,y coord, so x is the same while y moves by one unit (3% downwards)\r\n        break;\r\n      case 'UP':\r\n        head = [head[0], head[1] - 1]; //x,y coord, so x is the same while y moves by one negative unit (3% upwards)\r\n        break;\r\n    }\r\n    dots.push(head);   //this saves the new head.\r\n    dots.shift();   //use this in order to remove 1st item of the snakeBody array , as we need to remove the current tail.\r\n\r\n    this.setState({ //state saved\r\n      snakeBody: dots\r\n    })\r\n  }\r\n\r\n  collisionWithBorders() {  //the collision with borders defines a collision as when the coordinates of the head of the snake being equal to or exceeding the coordinates of the border lines\r\n    let head = this.state.snakeBody[this.state.snakeBody.length - 1];\r\n    if (head[0] >= 96 || head[1] >= 96 || head[0] < 0 || head[1] < 0) {\r\n      this.onGameOver();\r\n    }\r\n  }\r\n\r\n  collisionWithSelf() { //a collision with self is defined as the the coords of the head of the snake being equal to the coordinates of any other part of the snake\r\n    if (!this.state.immune) {\r\n      let snake = [...this.state.snakeBody]; \r\n      let head = snake[snake.length - 1];\r\n      snake.pop();\r\n      snake.forEach(dot => {  //each part of snake tested against head by going through each body part (aka dot) in the snakeBody array\r\n        if (head[0] === dot[0] && head[1] === dot[1]) {\r\n          this.onGameOver();  \r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  checkIfEaten() {\r\n    let head = this.state.snakeBody[this.state.snakeBody.length - 1];\r\n    let food = this.state.food;\r\n    if (Math.abs(head[0] - food[0]) <= 1 && Math.abs(head[1] - food[1]) <= 1) {\r\n      this.setState({ food: getRandomCoordinates() }); //if coord of head is within 1% of the coord of food, then food is eaten.\r\n      this.createTextPopup(\"+ \" + this.state.multiplier + \" score\");\r\n      this.increaseSnake(this.state.multiplier);\r\n      this.increaseSpeed();\r\n    }\r\n  }\r\n\r\n  checkIfEatenInterestingFood(prevProps, prevState) {\r\n    //superFood - gives rainbow colours and multiplier effect x 5, max speed, for 10 seconds\r\n    //mysteryFood - can give a good or bad effect\r\n    // plus points to length & score\r\n    // slow\r\n    // minus points to length & score\r\n    // immune status to collision with self\r\n    let interestingFood = this.state.interestingFood;\r\n    let head = this.state.snakeBody[this.state.snakeBody.length - 1];\r\n    if (this.state.isInterestingFoodVisible && Math.abs(head[0] - interestingFood[0]) <= 1 && Math.abs(head[1] - interestingFood[1]) <= 1) {\r\n      switch (this.state.interestingFoodType) {\r\n        case 'mystery-food':\r\n          let effect = ['add-score', 'minus-score', 'immune', 'slow'];\r\n          let selectedEffect = effect[Math.floor(Math.random() * 4)];\r\n          switch (selectedEffect) {\r\n            case 'add-score':\r\n              this.increaseSnake(this.state.multiplier * 2);\r\n              this.createTextPopup(\"Positive growth effect (10 seconds)!\");\r\n              break;\r\n            case 'minus-score':\r\n              this.decreaseSnake(this.state.multiplier * 2);\r\n              this.createTextPopup(\"Negative growth effect (10 seconds)!\");\r\n              break;\r\n              //popup badfruit;\r\n            case 'immune':\r\n              this.setImmune(prevProps, prevState);\r\n              this.createTextPopup(\"Immune to self collision status (10 seconds)!\");\r\n              break;\r\n            case 'slow':\r\n              this.setSlow(prevProps, prevState);\r\n              this.createTextPopup(\"Slowed effect (10 seconds)!\");\r\n              break;\r\n          }\r\n        break;\r\n        case 'super-food':\r\n          this.setSuperEffect(prevState);\r\n          this.createTextPopup(\"Food gives 6 points and extra speed (10 seconds)!\");\r\n          break;\r\n      }\r\n    }\r\n  }\r\n  \r\n  setImmune(prevState) {\r\n    if (prevState.immune !== true) {\r\n      this.setState({\r\n        immune: true,\r\n        isInterestingFoodVisible: false\r\n      }, () => {\r\n        setTimeout(this.removeImmune, 10000);\r\n      });\r\n    }\r\n  }\r\n\r\n  removeImmune = () => {\r\n    this.setState({immune: false});\r\n  }\r\n\r\n  setSlow(prevState) {\r\n    if (prevState.speed !== 500) {\r\n      this.setState({\r\n        speed: 500,\r\n        isInterestingFoodVisible: false\r\n      }, () => {\r\n        setTimeout(this.removeSlow, 10000);\r\n      });\r\n    }\r\n  }\r\n  \r\n  removeSlow = () => {\r\n    this.setState({\r\n      speed: 80,\r\n    });\r\n  }\r\n\r\n  setSuperEffect(prevState) {\r\n    if (prevState.multiplier !== 6 && prevState.speed !== 0) {\r\n      document.querySelectorAll('.snake-dot').forEach((el) => el.classList.add(\"super\"));\r\n      this.setState({\r\n        multiplier: 6,\r\n        speed: 0,\r\n        isInterestingFoodVisible: false\r\n      }, () => {\r\n        setTimeout(this.removeSuperEffect, 10000);\r\n      });\r\n    }\r\n  }\r\n\r\n  removeSuperEffect = () => {\r\n    document.querySelectorAll('.snake-dot').forEach((el) => el.classList.remove(\"super\"));\r\n    this.setState({\r\n      multiplier: 2,\r\n      speed: 80\r\n    });\r\n  }\r\n  \r\n  //lazerBeamFood - gives lazer powers during boss battle against mirror snake.\r\n    //mirror snake - is identical copy of current users snake (slightly slower), ways to defeat via lazer hit or by catching it's tail.\r\n      //what it does is either steal user food, try to eat user snake.\r\n\r\n  increaseSnake(multiplier) {\r\n    let newSnake = [...this.state.snakeBody];\r\n    for (let i = 0; i < multiplier; i++) {\r\n      newSnake.unshift([]);\r\n    }\r\n    this.setState({ snakeBody: newSnake }, () => {\r\n      this.checkLevelUp();\r\n    });\r\n  }\r\n\r\n  decreaseSnake(multiplier) {\r\n    if (this.state.snakeBody.length > multiplier + 1) {\r\n      let newSnake = [...this.state.snakeBody];\r\n      for (let i = 0; i < multiplier; i++) {\r\n        newSnake.unshift([]);\r\n      }\r\n      this.setState({ snakeBody: newSnake }, () => {\r\n        let level = Math.ceil(this.state.snakeBody.length / 5);\r\n        if ([5, 10, 15, 20, 25, 30].includes(this.state.snakeBody.length) )\r\n          this.createTextPopup(\"Level Up! - \" + level);\r\n        this.checkLevelUp();\r\n      });\r\n    }\r\n  }\r\n\r\n  checkLevelUp() {\r\n    if (Math.ceil(this.state.snakeBody.length / 5) % 10 === 0)\r\n    this.createTextPopup(\"Boss Battle - todo\");\r\n    \r\n    if ((this.state.snakeBody.length) % 4 === 0)\r\n      this.spawnInterestingFood();\r\n  }\r\n\r\n  spawnInterestingFood() {\r\n    let choices = ['super-food', 'mystery-food'];\r\n    let selectedInterestingFood = choices[Math.floor(Math.random() * 2)];\r\n    document.querySelectorAll('#interesting-food').forEach((el) => el.classList.remove('super-food'));\r\n    document.querySelectorAll('#interesting-food').forEach((el) => el.remove('mystery-food'));\r\n\r\n    this.setState({\r\n      isInterestingFoodVisible: true,\r\n      interestingFood: getRandomCoordinates(),\r\n      interestingFoodType: selectedInterestingFood\r\n    }, () => {\r\n      document.querySelectorAll('#interesting-food').forEach((el) => el.classList.add(selectedInterestingFood));\r\n      setTimeout(this.despawnInterestingFood, 10000);\r\n    });\r\n  }\r\n\r\n  despawnInterestingFood = () => {\r\n    if (document.querySelector('#interesting-food') !== null) {\r\n      this.setState({\r\n        isInterestingFoodVisible: false,\r\n      });\r\n    } \r\n  }\r\n\r\n  increaseSpeed() {\r\n    if (this.state.speed > 10) {\r\n      this.setState({ speed: this.state.speed - 10 });\r\n    }\r\n  }\r\n\r\n  onGameOver() {\r\n    alert(`Game Over. Your final score is : ${this.state.snakeBody.length}!`);\r\n    this.setState(initialState);\r\n  }\r\n\r\n  createTextPopup(text) {\r\n    var content = document.createTextNode(text);\r\n    document.getElementById(\"span\").appendChild(content);\r\n    setTimeout(this.removeTextPopup, 1500); \r\n  }\r\n\r\n  removeTextPopup = () => {\r\n    var el = document.getElementById(\"span\");\r\n    while (el.firstChild) {\r\n      el.removeChild(el.firstChild);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"grid\" className=\"grid\">\r\n        <p className=\"textScore\">Score : {this.state.snakeBody.length}</p>\r\n        <p className=\"textScore\">Level : {Math.ceil(this.state.snakeBody.length / 5)}</p>\r\n        <div id=\"scoreUpdates\"><span id=\"span\"></span></div>\r\n        <Snake snakeBody = {this.state.snakeBody}/>\r\n        <Food dot = {this.state.food}/>\r\n        {\r\n        this.state.isInterestingFoodVisible ? \r\n        <InterestingFood dot = {this.state.interestingFood}/> : null\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}